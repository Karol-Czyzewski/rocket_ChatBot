{"mappings":"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","sources":["src/scripts/ChatbotHelpers.ts","src/scripts/ChatbotStorage.ts","src/scripts/ChatbotApi.ts","src/scripts/questions.ts","src/scripts/ChatbotController.ts","src/app.ts","src/scripts/Chatbot.ts"],"sourcesContent":["export const createElement = (type: string, cssClass: string = \"null\", textContent?: string) => {\r\n    const element = document.createElement(type);\r\n    element.textContent = textContent || '';\r\n    element.classList.add(cssClass);\r\n    return element;\r\n};\r\n\r\nexport const getHtmlElement = (element: string) => {\r\n    const htmlElement = document.querySelector(element);\r\n    if(htmlElement === null) throw new Error(`${element} HTML element dosent exist`);\r\n    return htmlElement;\r\n}\r\n\r\n// Words letters small, word start with @\r\nexport const commandRegExp: RegExp = new RegExp(/(@[a-z])\\w+/, 'g');\r\n","import { AvaibleWriters, Message} from './types';\r\n\r\nexport class ChatbotStorage {\r\n    messagesList: Message[];\r\n    messageContainer: HTMLElement;\r\n\r\n    constructor(messagesList: Message[], messageContainer: HTMLElement) {\r\n        this.messagesList = messagesList;\r\n        this.messageContainer = messageContainer;\r\n    }\r\n\r\n    setMessageInStorage(value: string, type: AvaibleWriters) {\r\n        this.messagesList.push({value: value, type: type})\r\n        localStorage.setItem('messages', JSON.stringify(this.messagesList));\r\n    }\r\n\r\n    removeMessagesFromStorage() {\r\n        this.messagesList.splice(0);\r\n        localStorage.removeItem('messages');\r\n        this.messageContainer.textContent = \"\";\r\n    }\r\n}\r\n","export class ChatbotApi {\r\n    async getSpaceXData (query: string) {\r\n        try {\r\n            const response = await fetch(`https://api.spacexdata.com/v4/launches/${query}`);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const spaceXData = await response.json();\r\n            return spaceXData;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n","export const questions = [\r\n    {question: \"name of company\", anwser: \"SpaceX\"},\r\n    {question: \"founder\", anwser: \"Elon Musk\"},\r\n    {question: \"website\", anwser: \"https://www.spacex.com/\"},\r\n    {question: \"employees\", anwser: \"8000 people\"},\r\n    {question: \"headquarters\", anwser: \"city: Hawthorne, state: California\"},\r\n];\r\n","import { createElement, getHtmlElement, commandRegExp} from './ChatbotHelpers';\r\nimport { ChatbotStorage } from './ChatbotStorage';\r\nimport { ChatbotApi } from './ChatbotApi';\r\nimport { AvaibleWriters, AvaibleCommands, Message} from './types';\r\nimport { questions } from './questions';\r\n\r\n\r\n\r\nexport class ChatbotController {\r\n    chatbotOpenButton: HTMLElement;\r\n    chatbotCloseButton: HTMLElement;\r\n    chatbotContainer: HTMLElement;\r\n    messageContainer: HTMLElement;\r\n\r\n    chatbotStorage: ChatbotStorage;\r\n    chatbotApi: ChatbotApi;\r\n    messagesList: Message[];\r\n\r\n    constructor(messagesList: Message[]) {\r\n        this.chatbotOpenButton = createElement('button');\r\n        this.chatbotCloseButton = createElement('button');\r\n        this.chatbotContainer = createElement('div');\r\n        this.messageContainer = createElement('div', 'msgArea');\r\n\r\n        this.chatbotStorage = new ChatbotStorage(messagesList, this.messageContainer);\r\n        this.chatbotApi = new ChatbotApi();\r\n        this.messagesList = messagesList;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.getMessageFromStorage();\r\n        this.createChatbot();\r\n        this.createGreetings();\r\n    }\r\n\r\n    createChatbot() {\r\n        this.renderBotHeading();\r\n        this.renderMessageArea();\r\n        this.createInputField();\r\n\r\n        this.chatbotContainer.classList.add(\"chatbotContainer\");\r\n        this.chatbotOpenButton.classList.add(\"chatbotOpenButton\");\r\n\r\n        this.chatbotOpenButton.addEventListener('click', () => this.chatbotContainer.classList.add(\"open\"));\r\n        this.chatbotCloseButton.addEventListener('click', () => this.chatbotContainer.classList.remove(\"open\"));\r\n\r\n        const body = getHtmlElement('body');\r\n        body.appendChild(this.chatbotOpenButton);\r\n        body.appendChild(this.chatbotContainer);\r\n    }\r\n\r\n    getMessageFromStorage() {\r\n        this.messagesList.forEach(item => this.renderMessage(item.value, item.type))\r\n    }\r\n\r\n    createGreetings() {\r\n        this.createMessage(\"Helllo in rocket_Bot! There are some info about SpaceX Corporation.\", \"bot-welcome\");\r\n        const questionsList = createElement('ul', 'list');\r\n        this.messageContainer.appendChild(questionsList);\r\n\r\n        questions.forEach(item => {\r\n            const li = createElement('li', 'list-element', item.question);\r\n            questionsList.appendChild(li);\r\n            li.addEventListener('click', () => this.createMessage(item.anwser, \"bot\"))\r\n        });\r\n    }\r\n\r\n    renderMessageArea() {\r\n        this.chatbotContainer.appendChild(this.messageContainer);\r\n    }\r\n\r\n    renderBotHeading() {\r\n        const headingOfBot = createElement('div', 'headingOfBot');\r\n        const welcomeHeader = createElement('div', 'welcomeHeader', 'rocket_Bot');\r\n        headingOfBot.appendChild(welcomeHeader);\r\n        headingOfBot.appendChild(this.chatbotCloseButton);\r\n        this.chatbotContainer.appendChild(headingOfBot);\r\n    }\r\n\r\n    createInputField() {\r\n        const formContainer = createElement('div', 'formContainer');\r\n        this.chatbotContainer.appendChild(formContainer);\r\n\r\n        const formElement = createElement('form');\r\n        formContainer.appendChild(formElement);\r\n\r\n        const label = createElement('label');\r\n        formElement.appendChild(label);\r\n\r\n        const input = createElement('input') as HTMLInputElement;\r\n\r\n        const inputSubmit = createElement('input') as HTMLInputElement;\r\n        inputSubmit.type = \"submit\";\r\n        inputSubmit.value = \"\";\r\n\r\n        const btnContainer = createElement('div', \"buttons-container\");\r\n        formContainer.appendChild(btnContainer);\r\n\r\n        const clearStorageBtn = createElement('button', \"null\" ,'Clear');\r\n\r\n        clearStorageBtn.addEventListener('click', () => {\r\n            this.chatbotStorage.removeMessagesFromStorage();\r\n            this.createGreetings();\r\n        });\r\n\r\n        const aboutBtn = createElement('button');\r\n        aboutBtn.textContent = \"Info launch\";\r\n        aboutBtn.addEventListener('click', () => this.createMessage(\r\n            `List of commands:\r\n            1. @next - next launch\r\n            2. @latest - latest launch`\r\n            , \"bot\"));\r\n\r\n        btnContainer.appendChild(clearStorageBtn);\r\n        btnContainer.appendChild(aboutBtn);\r\n\r\n        label.appendChild(input);\r\n\r\n        formElement.appendChild(inputSubmit);\r\n        formElement.addEventListener('submit', (e) => this.logSubmit(e, input))\r\n    }\r\n\r\n    logSubmit(e: Event, input: HTMLInputElement) {\r\n        e.preventDefault();\r\n\r\n        if (input.value === '') return;\r\n        this.createMessage(input.value, \"user\");\r\n\r\n        const command = input.value as AvaibleCommands;\r\n        this.runCommand(command);\r\n\r\n        input.value = \"\";\r\n    }\r\n\r\n    createMessage(text: string, user: AvaibleWriters) {\r\n        this.renderMessage(text, user);\r\n        this.chatbotStorage.setMessageInStorage(text, user);\r\n    }\r\n\r\n    renderMessage(text: string, writer: AvaibleWriters) {\r\n        const msg = createElement('div', 'message', text);\r\n        msg.classList.add(`message--${writer}`);\r\n        this.messageContainer.appendChild(msg);\r\n    }\r\n\r\n    runCommand(inputValue: AvaibleCommands) {\r\n        if(!commandRegExp.test(inputValue)) return;\r\n        this.createMessage('Loading data...', \"bot\");\r\n        switch (inputValue) {\r\n            case \"@next\":\r\n                this.renderSpaceXData(\"next\");\r\n                break;\r\n            case \"@latest\":\r\n                this.renderSpaceXData(\"latest\");\r\n                break;\r\n            default:\r\n                this.createMessage(\"Uncorrect command, please check -> Info launch\", \"bot\");\r\n        }\r\n    }\r\n\r\n    async renderSpaceXData(query: string) {\r\n        const data = await this.chatbotApi.getSpaceXData(query);\r\n        this.createMessage(`${query} rocket launch:\r\n        rocket name: ${data.name}\r\n        launch date: ${data.date_utc}`,\r\n        \"bot\");\r\n    }\r\n}\r\n","// - [ ] Głównym zadaniem jest stworzenie gotowego elementu UI (buttona), który po kliknięciu ma otwierać okno chatbota\r\n\r\n// * Okno ma nie zajmować więcej niż 25% ekranu +\r\n// * Kliknięcie poza obszar chatbota powoduje jego zamknięcie\r\n\r\n// - [ ] Po otwarciu okna ma pojawic się kilka opcji predefiniowanych, po kliknięciu w które pojawia się odpowiedź w dymku, a zaraz poniżej po raz kolejny wszystkie opcje predefiniowane\r\n\r\n// - [ ] Pole tekstowe ma być aktywne, a bot ma przeszukiwać wpisany tekst pod względem słowa-kluczy i zwracać prawdopodobne odpowiedzi z opcji predefiniowanych\r\n\r\n// - [ ] Jeśli żadne ze słów-kluczy nie pasuje, bot informuje że żaden z konsultantów nie jest podłączony, nie może odpowiedzieć na pytanie, i pokazuje opcje predefiniowane\r\n\r\nimport './style.scss';\r\nimport { Chatbot } from './scripts/Chatbot';\r\n\r\n// import { Chatbot } from './scripts/ChatbotAll';\r\n\r\nconst chatbot = new Chatbot();\r\n","import { ChatbotController } from './ChatbotController';\r\nimport { ChatbotStorage } from './ChatbotStorage';\r\nimport { Message } from './types';\r\nexport class Chatbot {\r\n    messagesList: Message[];\r\n    chatbotController: ChatbotController;\r\n    // chatbotStorage: ChatbotStorage;\r\n\r\n    constructor() {\r\n        const messagesData = localStorage.getItem(\"messages\");\r\n        this.messagesList = messagesData === null ? [] : JSON.parse(messagesData);\r\n        this.chatbotController = new ChatbotController(this.messagesList);\r\n        // this.chatbotStorage = new ChatbotStorage(this.messagesList, this.chatbotController.messageContainer);\r\n    }\r\n}\r\n"],"names":["$db90a35d7ab9a97f$export$c8a8987d4410bf2d","type","cssClass","textContent","element","document","createElement","classList","add","$db90a35d7ab9a97f$export$abd4f27bac909b5a","RegExp","$526811864498031d$export$94f33aa3be2c9674","constructor","messagesList","messageContainer","this","setMessageInStorage","value","push","localStorage","setItem","JSON","stringify","removeMessagesFromStorage","splice","removeItem","$3b12311fbe06d532$export$635cf5e6672165a2","async","query","response","fetch","ok","Error","status","json","err","$a1573fa4a058ebb1$export$2deac3956661e672","question","anwser","$2678445089da83c6$export$d4d6f9e4e04ea331","chatbotOpenButton","chatbotCloseButton","chatbotContainer","chatbotStorage","chatbotApi","init","getMessageFromStorage","createChatbot","createGreetings","renderBotHeading","renderMessageArea","createInputField","addEventListener","remove","body","htmlElement","querySelector","$db90a35d7ab9a97f$export$c73a4c642f0e51ad","appendChild","forEach","item","renderMessage","createMessage","questionsList","li","headingOfBot","welcomeHeader","formContainer","formElement","label","input","inputSubmit","btnContainer","clearStorageBtn","aboutBtn","e","logSubmit","preventDefault","command","runCommand","text","user","writer","msg","inputValue","test","renderSpaceXData","data","getSpaceXData","messagesData","getItem","parse","chatbotController"],"version":3,"file":"index.043af79c.js.map"}