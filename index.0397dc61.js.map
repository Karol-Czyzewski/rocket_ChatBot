{"mappings":"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","sources":["src/scripts/ChatbotHelpers.ts","src/scripts/questions.ts","src/scripts/ChatbotRender.ts","src/scripts/ChatbotStorage.ts","src/scripts/ChatbotApi.ts","src/scripts/ChatbotController.ts","src/app.ts","src/scripts/Chatbot.ts"],"sourcesContent":["export const createElement = (type: string, cssClass: string, textContent?: string) => {\r\n    const element = document.createElement(type);\r\n    element.textContent = textContent || '';\r\n    element.classList.add(cssClass);\r\n    return element;\r\n};\r\n\r\nexport const getHtmlElement = (element: string) => {\r\n    const htmlElement = document.querySelector(element);\r\n    if(htmlElement === null) throw new Error(`${element} HTML element dosent exist`);\r\n    return htmlElement;\r\n}\r\n\r\n// Words letters small, word start with @\r\nexport const commandRegExp: RegExp = new RegExp(/(@[a-z])\\w+/, 'g');\r\n","export const questions = [\r\n    {question: \"name of company\", anwser: \"SpaceX\"},\r\n    {question: \"founder\", anwser: \"Elon Musk\"},\r\n    {question: \"website\", anwser: \"https://www.spacex.com/\"},\r\n    {question: \"employees\", anwser: \"8000 people\"},\r\n    {question: \"headquarters\", anwser: \"city: Hawthorne, state: California\"},\r\n];\r\n","import { AvaibleWriters, AvaibleCommands} from './types';\r\nimport { createElement, getHtmlElement} from './ChatbotHelpers';\r\nimport { ChatbotStorage } from './ChatbotStorage';\r\nimport { ChatbotController } from './ChatbotController';\r\nimport { questions } from './questions';\r\n\r\nexport class ChatbotRender {\r\n    chatbotStorage: ChatbotStorage;\r\n    chatbotController: ChatbotController;\r\n\r\n    chatbotOpenButton: HTMLElement;\r\n    chatbotCloseButton: HTMLElement;\r\n    chatbotContainer: HTMLElement;\r\n    messageContainer: HTMLElement;\r\n\r\n    constructor(chatbotStorage: ChatbotStorage, chatbotController: ChatbotController) {\r\n        this.chatbotStorage = chatbotStorage;\r\n        this.chatbotController = chatbotController;\r\n\r\n        this.chatbotOpenButton = createElement('button', 'chatbotOpenButton');\r\n        this.chatbotCloseButton = createElement('button', 'chatbotCloseButton');\r\n        this.chatbotContainer = createElement('div', 'chatbotContainer');\r\n        this.messageContainer = createElement('div', 'msgArea');\r\n    }\r\n\r\n    createChatbot() {\r\n        this.renderBotHeading();\r\n        this.renderMessageArea();\r\n        this.createInputField();\r\n\r\n        this.chatbotOpenButton.addEventListener('click', () => this.chatbotContainer.classList.add(\"open\"));\r\n        this.chatbotCloseButton.addEventListener('click', () => this.chatbotContainer.classList.remove(\"open\"));\r\n\r\n        const body = getHtmlElement('body');\r\n        body.appendChild(this.chatbotOpenButton);\r\n        body.appendChild(this.chatbotContainer);\r\n    }\r\n\r\n    renderMessageArea() {\r\n        this.chatbotContainer.appendChild(this.messageContainer);\r\n    }\r\n\r\n    renderBotHeading() {\r\n        const headingOfBot = createElement('div', 'headingOfBot');\r\n        const welcomeHeader = createElement('div', 'welcomeHeader', 'rocket_Bot');\r\n        headingOfBot.appendChild(welcomeHeader);\r\n        headingOfBot.appendChild(this.chatbotCloseButton);\r\n        this.chatbotContainer.appendChild(headingOfBot);\r\n    }\r\n\r\n    createInputField() {\r\n        const formContainer = createElement('div', 'formContainer');\r\n        this.chatbotContainer.appendChild(formContainer);\r\n\r\n        const formElement = createElement('form', 'form');\r\n        formContainer.appendChild(formElement);\r\n\r\n        const label = createElement('label', 'label');\r\n        formElement.appendChild(label);\r\n\r\n        const input = createElement('input', 'input') as HTMLInputElement;\r\n\r\n        const inputSubmit = createElement('input', 'input') as HTMLInputElement;\r\n        inputSubmit.type = \"submit\";\r\n        inputSubmit.value = \"\";\r\n\r\n        const btnContainer = createElement('div', \"buttons-container\");\r\n        formContainer.appendChild(btnContainer);\r\n\r\n        const clearStorageBtn = createElement('button', 'cta-form' ,'Clear');\r\n\r\n        clearStorageBtn.addEventListener('click', () => {\r\n            this.chatbotStorage.removeMessagesFromStorage();\r\n            this.messageContainer.textContent = \"\";\r\n            this.createGreetings();\r\n        });\r\n\r\n        const aboutBtn = createElement('button', 'cta-form', 'Info launch');\r\n        aboutBtn.addEventListener('click', () => this.createMessage(\r\n            `List of commands:\r\n            1. @next - next launch\r\n            2. @latest - latest launch`\r\n            , \"bot\"));\r\n\r\n        btnContainer.appendChild(clearStorageBtn);\r\n        btnContainer.appendChild(aboutBtn);\r\n\r\n        label.appendChild(input);\r\n\r\n        formElement.appendChild(inputSubmit);\r\n        formElement.addEventListener('submit', (e) => this.logSubmit(e, input))\r\n    }\r\n\r\n    logSubmit(e: Event, input: HTMLInputElement) {\r\n        e.preventDefault();\r\n\r\n        if (input.value === '') return;\r\n        this.createMessage(input.value, \"user\");\r\n\r\n        const command = input.value as AvaibleCommands;\r\n        this.chatbotController.runCommand(command);\r\n\r\n        input.value = \"\";\r\n    }\r\n\r\n    createGreetings() {\r\n        this.createMessage(\"Helllo in rocket_Bot! There are some info about SpaceX Corporation.\", \"bot-welcome\");\r\n        const questionsList = createElement('ul', 'list');\r\n        this.messageContainer.appendChild(questionsList);\r\n\r\n        questions.forEach(item => {\r\n            const li = createElement('li', 'list-element', item.question);\r\n            questionsList.appendChild(li);\r\n            li.addEventListener('click', () => this.createMessage(item.anwser, \"bot\"))\r\n        });\r\n    }\r\n\r\n    createMessage(text: string, user: AvaibleWriters) {\r\n        this.renderMessage(text, user);\r\n        this.chatbotStorage.setMessageInStorage(text, user);\r\n    }\r\n\r\n    renderMessage(text: string, writer: AvaibleWriters) {\r\n        const msg = createElement('div', 'message', text);\r\n        msg.classList.add(`message--${writer}`);\r\n        this.messageContainer.appendChild(msg);\r\n    }\r\n}\r\n","import { AvaibleWriters, Message} from './types';\r\n\r\nexport class ChatbotStorage {\r\n    messagesList: Message[];\r\n\r\n    constructor(messagesList: Message[]) {\r\n        this.messagesList = messagesList;\r\n    }\r\n\r\n    setMessageInStorage(value: string, type: AvaibleWriters) {\r\n        this.messagesList.push({value: value, type: type})\r\n        localStorage.setItem('messages', JSON.stringify(this.messagesList));\r\n    }\r\n\r\n    removeMessagesFromStorage() {\r\n        this.messagesList.splice(0);\r\n        localStorage.removeItem('messages');\r\n    }\r\n}\r\n","export class ChatbotApi {\r\n    async getSpaceXData (query: string) {\r\n        try {\r\n            const response = await fetch(`https://api.spacexdata.com/v4/launches/${query}`);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const spaceXData = await response.json();\r\n            return spaceXData;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n","import { commandRegExp} from './ChatbotHelpers';\r\nimport { ChatbotRender } from './ChatbotRender';\r\nimport { ChatbotStorage } from './ChatbotStorage';\r\n\r\nimport { ChatbotApi } from './ChatbotApi';\r\nimport {AvaibleCommands, Message} from './types';\r\n\r\nexport class ChatbotController {\r\n    chatbotRender: ChatbotRender;\r\n    chatbotStorage: ChatbotStorage;\r\n    chatbotApi: ChatbotApi;\r\n    messagesList: Message[];\r\n\r\n    constructor(messagesList: Message[]) {\r\n        this.chatbotStorage = new ChatbotStorage(messagesList);\r\n        this.chatbotRender = new ChatbotRender(this.chatbotStorage, this);\r\n        this.chatbotApi = new ChatbotApi();\r\n        this.messagesList = messagesList;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.chatbotRender.createChatbot();\r\n        this.getMessageFromStorage();\r\n        this.chatbotRender.createGreetings();\r\n    }\r\n\r\n    getMessageFromStorage() {\r\n        this.messagesList.forEach(item => this.chatbotRender.renderMessage(item.value, item.type))\r\n    }\r\n\r\n    runCommand(inputValue: AvaibleCommands) {\r\n        if(!(commandRegExp.test(inputValue))) return;\r\n        this.chatbotRender.createMessage('Loading data...', \"bot\");\r\n        switch (inputValue) {\r\n            case \"@next\":\r\n                this.renderSpaceXData(\"next\");\r\n                break;\r\n            case \"@latest\":\r\n                this.renderSpaceXData(\"latest\");\r\n                break;\r\n            default:\r\n                this.chatbotRender.createMessage(\"Uncorrect command, please check -> Info launch\", \"bot\");\r\n        }\r\n    }\r\n\r\n    async renderSpaceXData(query: string) {\r\n        const data = await this.chatbotApi.getSpaceXData(query);\r\n        this.chatbotRender.createMessage(`${query} rocket launch:\r\n        rocket name: ${data.name}\r\n        launch date: ${data.date_utc}`,\r\n        \"bot\");\r\n    }\r\n}\r\n","import './style.scss';\r\nimport { Chatbot } from './scripts/Chatbot';\r\nnew Chatbot();\r\n","import { ChatbotController } from './ChatbotController';\r\nimport { Message } from './types';\r\nexport class Chatbot {\r\n    messagesList: Message[];\r\n    chatbotController: ChatbotController;\r\n\r\n    constructor() {\r\n        const messagesData = localStorage.getItem(\"messages\");\r\n        this.messagesList = messagesData === null ? [] : JSON.parse(messagesData);\r\n        this.chatbotController = new ChatbotController(this.messagesList);\r\n    }\r\n}\r\n"],"names":["$db90a35d7ab9a97f$export$c8a8987d4410bf2d","type","cssClass","textContent","element","document","createElement","classList","add","$db90a35d7ab9a97f$export$abd4f27bac909b5a","RegExp","$a1573fa4a058ebb1$export$2deac3956661e672","question","anwser","$7bccc7f665ab8bd1$export$31d17b15ab106a29","constructor","chatbotStorage","chatbotController","this","chatbotOpenButton","chatbotCloseButton","chatbotContainer","messageContainer","createChatbot","renderBotHeading","renderMessageArea","createInputField","addEventListener","remove","body","htmlElement","querySelector","Error","$db90a35d7ab9a97f$export$c73a4c642f0e51ad","appendChild","headingOfBot","welcomeHeader","formContainer","formElement","label","input","inputSubmit","value","btnContainer","clearStorageBtn","removeMessagesFromStorage","createGreetings","aboutBtn","createMessage","e","logSubmit","preventDefault","command","runCommand","questionsList","forEach","item","li","text","user","renderMessage","setMessageInStorage","writer","msg","$526811864498031d$export$94f33aa3be2c9674","messagesList","push","localStorage","setItem","JSON","stringify","splice","removeItem","$3b12311fbe06d532$export$635cf5e6672165a2","async","query","response","fetch","ok","status","json","err","$2678445089da83c6$export$d4d6f9e4e04ea331","chatbotRender","chatbotApi","init","getMessageFromStorage","inputValue","test","renderSpaceXData","data","getSpaceXData","name","date_utc","messagesData","getItem","parse"],"version":3,"file":"index.0397dc61.js.map"}