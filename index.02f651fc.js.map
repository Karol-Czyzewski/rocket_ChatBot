{"mappings":"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","sources":["src/scripts/ChatbotHelpers.ts","src/scripts/questions.ts","src/scripts/ChatbotRender.ts","src/scripts/ChatbotStorage.ts","src/scripts/ChatbotApi.ts","src/scripts/ChatbotController.ts","src/app.ts","src/scripts/Chatbot.ts"],"sourcesContent":["export const createElement = (type: string, cssClass: string, textContent?: string) => {\r\n    const element = document.createElement(type);\r\n    element.textContent = textContent || '';\r\n    element.classList.add(cssClass);\r\n    return element;\r\n};\r\n\r\nexport const getHtmlElement = (element: string) => {\r\n    const htmlElement = document.querySelector(element);\r\n    if(htmlElement === null) throw new Error(`${element} HTML element dosent exist`);\r\n    return htmlElement;\r\n}\r\n","export const questions = [\r\n    {question: \"name of company\", anwser: \"SpaceX\"},\r\n    {question: \"founder\", anwser: \"Elon Musk\"},\r\n    {question: \"website\", anwser: \"https://www.spacex.com/\"},\r\n    {question: \"employees\", anwser: \"8000 people\"},\r\n    {question: \"headquarters\", anwser: \"city: Hawthorne, state: California\"},\r\n];\r\n","import { AvaibleWriters, AvaibleCommands} from './types';\r\nimport { createElement, getHtmlElement} from './ChatbotHelpers';\r\nimport { ChatbotStorage } from './ChatbotStorage';\r\nimport { questions } from './questions';\r\nimport { ChatbotApi } from './ChatbotApi';\r\n\r\nexport class ChatbotRender {\r\n    chatbotStorage: ChatbotStorage;\r\n    chatbotApi: ChatbotApi;\r\n\r\n    chatbotOpenButton: HTMLElement;\r\n    chatbotCloseButton: HTMLElement;\r\n    chatbotContainer: HTMLElement;\r\n    messageContainer: HTMLElement;\r\n\r\n    constructor(chatbotStorage: ChatbotStorage, chatbotApi: ChatbotApi) {\r\n        this.chatbotStorage = chatbotStorage;\r\n        this.chatbotApi = chatbotApi;\r\n\r\n        this.chatbotOpenButton = createElement('button', 'chatbotOpenButton');\r\n        this.chatbotCloseButton = createElement('button', 'chatbotCloseButton');\r\n        this.chatbotContainer = createElement('div', 'chatbotContainer');\r\n        this.messageContainer = createElement('div', 'msgArea');\r\n    }\r\n\r\n    createChatbot() {\r\n        this.renderBotHeading();\r\n        this.renderMessageArea();\r\n        this.createInputField();\r\n\r\n        this.chatbotOpenButton.addEventListener('click', () => this.chatbotContainer.classList.add(\"open\"));\r\n        this.chatbotCloseButton.addEventListener('click', () => this.chatbotContainer.classList.remove(\"open\"));\r\n\r\n        const body = getHtmlElement('body');\r\n        body.appendChild(this.chatbotOpenButton);\r\n        body.appendChild(this.chatbotContainer);\r\n    }\r\n\r\n    renderMessageArea() {\r\n        this.chatbotContainer.appendChild(this.messageContainer);\r\n    }\r\n\r\n    renderBotHeading() {\r\n        const headingOfBot = createElement('div', 'headingOfBot');\r\n        const welcomeHeader = createElement('div', 'welcomeHeader', 'rocket_Bot');\r\n        headingOfBot.appendChild(welcomeHeader);\r\n        headingOfBot.appendChild(this.chatbotCloseButton);\r\n        this.chatbotContainer.appendChild(headingOfBot);\r\n    }\r\n\r\n    createInputField() {\r\n        const formContainer = createElement('div', 'formContainer');\r\n        this.chatbotContainer.appendChild(formContainer);\r\n\r\n        const formElement = createElement('form', 'form');\r\n        formContainer.appendChild(formElement);\r\n\r\n        const label = createElement('label', 'label');\r\n        formElement.appendChild(label);\r\n\r\n        const input = createElement('input', 'input') as HTMLInputElement;\r\n\r\n        const inputSubmit = createElement('input', 'input') as HTMLInputElement;\r\n        inputSubmit.type = \"submit\";\r\n        inputSubmit.value = \"\";\r\n\r\n        const btnContainer = createElement('div', \"buttons-container\");\r\n        formContainer.appendChild(btnContainer);\r\n\r\n        const clearStorageBtn = createElement('button', 'cta-form' ,'Clear');\r\n\r\n        clearStorageBtn.addEventListener('click', () => {\r\n            this.chatbotStorage.removeMessagesFromStorage();\r\n            this.messageContainer.textContent = \"\";\r\n            this.createGreetings();\r\n        });\r\n\r\n        const aboutBtn = createElement('button', 'cta-form', 'Info launch');\r\n        aboutBtn.addEventListener('click', () => this.createMessage(\r\n            `List of commands:\r\n            1. @next - next launch\r\n            2. @latest - latest launch`\r\n            , \"bot\"));\r\n\r\n        btnContainer.appendChild(clearStorageBtn);\r\n        btnContainer.appendChild(aboutBtn);\r\n\r\n        label.appendChild(input);\r\n\r\n        formElement.appendChild(inputSubmit);\r\n        formElement.addEventListener('submit', (e) => this.logSubmit(e, input))\r\n    }\r\n\r\n    createGreetings() {\r\n        this.createMessage(\"Helllo in rocket_Bot! There are some info about SpaceX Corporation.\", \"bot-welcome\");\r\n        const questionsList = createElement('ul', 'list');\r\n        this.messageContainer.appendChild(questionsList);\r\n\r\n        questions.forEach(item => {\r\n            const li = createElement('li', 'list-element', item.question);\r\n            questionsList.appendChild(li);\r\n            li.addEventListener('click', () => this.createMessage(item.anwser, \"bot\"))\r\n        });\r\n    }\r\n\r\n    createMessage(text: string, user: AvaibleWriters) {\r\n        this.renderMessage(text, user);\r\n        this.chatbotStorage.setMessageInStorage(text, user);\r\n    }\r\n\r\n    renderMessage(text: string, writer: AvaibleWriters) {\r\n        const msg = createElement('div', 'message', text);\r\n        msg.classList.add(`message--${writer}`);\r\n        this.messageContainer.appendChild(msg);\r\n    }\r\n\r\n    runCommand(inputValue: string) {\r\n        switch (inputValue) {\r\n            case \"@next\":\r\n                this.createMessage('Loading data with next launch...', \"bot\");\r\n                this.renderSpaceXData(\"next\");\r\n                break;\r\n            case \"@latest\":\r\n                this.createMessage('Loading data with latest launch...', \"bot\");\r\n                this.renderSpaceXData(\"latest\");\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    logSubmit(e: Event, input: HTMLInputElement) {\r\n        e.preventDefault();\r\n\r\n        if (input.value === '') return;\r\n        this.createMessage(input.value, \"user\");\r\n\r\n        const command = input.value as AvaibleCommands;\r\n        this.runCommand(command);\r\n\r\n        input.value = \"\";\r\n    }\r\n\r\n    async renderSpaceXData(query: string) {\r\n        const data = await this.chatbotApi.getSpaceXData(query);\r\n        this.createMessage(`${query} rocket launch:\r\n        rocket name: ${data.name}\r\n        launch date: ${data.date_utc}`,\r\n        \"bot\");\r\n    }\r\n}\r\n","import { AvaibleWriters, Message} from './types';\r\n\r\nexport class ChatbotStorage {\r\n    messagesList: Message[];\r\n\r\n    constructor() {\r\n        const messagesData = localStorage.getItem(\"messages\");\r\n        this.messagesList = messagesData === null ? [] : JSON.parse(messagesData);\r\n    }\r\n\r\n    setMessageInStorage(value: string, type: AvaibleWriters) {\r\n        this.messagesList.push({value: value, type: type})\r\n        localStorage.setItem('messages', JSON.stringify(this.messagesList));\r\n    }\r\n\r\n    removeMessagesFromStorage() {\r\n        this.messagesList.splice(0);\r\n        localStorage.removeItem('messages');\r\n    }\r\n}\r\n","export class ChatbotApi {\r\n    async getSpaceXData (query: string) {\r\n        try {\r\n            const response = await fetch(`https://api.spacexdata.com/v4/launches/${query}`);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const spaceXData = await response.json();\r\n            return spaceXData;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n","import { ChatbotRender } from './ChatbotRender';\r\nimport { ChatbotStorage } from './ChatbotStorage';\r\nimport { ChatbotApi } from './ChatbotApi';\r\n\r\nexport class ChatbotController {\r\n    chatbotRender: ChatbotRender;\r\n    chatbotStorage: ChatbotStorage;\r\n    chatbotApi: ChatbotApi;\r\n\r\n    constructor() {\r\n        this.chatbotStorage = new ChatbotStorage();\r\n        this.chatbotApi = new ChatbotApi();\r\n        this.chatbotRender = new ChatbotRender(this.chatbotStorage, this.chatbotApi);\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.chatbotRender.createChatbot();\r\n        this.getMessageFromStorage();\r\n        this.chatbotRender.createGreetings();\r\n    }\r\n\r\n    getMessageFromStorage() {\r\n        this.chatbotStorage.messagesList.forEach(item => this.chatbotRender.renderMessage(item.value, item.type))\r\n    }\r\n}\r\n","import './style.scss';\r\nimport { Chatbot } from './scripts/Chatbot';\r\nnew Chatbot();\r\n","import { ChatbotController } from './ChatbotController';\r\nexport class Chatbot {\r\n    chatbotController: ChatbotController;\r\n\r\n    constructor() {\r\n        this.chatbotController = new ChatbotController();\r\n    }\r\n}\r\n"],"names":["$db90a35d7ab9a97f$export$c8a8987d4410bf2d","type","cssClass","textContent","element","document","createElement","classList","add","$a1573fa4a058ebb1$export$2deac3956661e672","question","anwser","$7bccc7f665ab8bd1$export$31d17b15ab106a29","constructor","chatbotStorage","chatbotApi","this","chatbotOpenButton","chatbotCloseButton","chatbotContainer","messageContainer","createChatbot","renderBotHeading","renderMessageArea","createInputField","addEventListener","remove","body","htmlElement","querySelector","Error","$db90a35d7ab9a97f$export$c73a4c642f0e51ad","appendChild","headingOfBot","welcomeHeader","formContainer","formElement","label","input","inputSubmit","value","btnContainer","clearStorageBtn","removeMessagesFromStorage","createGreetings","aboutBtn","createMessage","e","logSubmit","questionsList","forEach","item","li","text","user","renderMessage","setMessageInStorage","writer","msg","inputValue","renderSpaceXData","preventDefault","command","runCommand","query","data","getSpaceXData","$526811864498031d$export$94f33aa3be2c9674","messagesData","localStorage","getItem","messagesList","JSON","parse","push","setItem","stringify","splice","removeItem","$3b12311fbe06d532$export$635cf5e6672165a2","async","response","fetch","ok","status","json","err","$2678445089da83c6$export$d4d6f9e4e04ea331","chatbotRender","init","getMessageFromStorage","chatbotController"],"version":3,"file":"index.02f651fc.js.map"}